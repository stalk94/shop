const CryptoJS = require('crypto-js');
const { db } = require("./engine");
const sessionList = require("./sessionList");



exports.authVerifuSid =async(sid)=> {
    const loginFindResult = await sessionList.get(sid);

    if(loginFindResult!==false){
        let user = await db.get("users."+loginFindResult);
        delete user.password;
        return user;
    }
    else return false;
}
exports.authVerifu =async(login, password, sid)=> {
    if(login && password && sid){
        let user = await db.get("users."+login);
        if(user && user.password===password) {
            sessionList.set(sid, login);
            delete user.password;
            return user;
        }
        else {
            logger.error(`üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${login}, error authVerifu lvl 2`);
            return {error: "error password or login"};
        }
    }
    else {
        logger.error(`üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${login}, error authVerifu lvl 1`);
        return {error: "–í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ invalid login or password"};
    }
}
exports.regUser =async(login, pass)=> {
    if(pass.length < 6 && pass.length > 35) return {error:"password minimum 6 simbol, max 35"};
    if(login.length < 5 && login.length > 22) return {error:"login minimum 5 simbol, max 22"};
    else {
        const newUser = await db.get("users."+login);
        if(newUser) {
            logger.error(`üìù –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${login}, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–µ.`);
            return {error:"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"};
        }
        else {
            await db.set("users."+login, {
                login: login,
                password: pass,
                id: Object.keys(await db.get("users")).length + 1,
                online: false,
                avatar: undefined,
                permision: 2,
                story: [],
                cupons: []
            });
            return {};
        }
    }
}